// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: bot_status.sql

package db

import (
	"context"
)

const CreateBotStatus = `-- name: CreateBotStatus :one
INSERT INTO "bot_status" ("id", "isActive", "activity")
VALUES ($1, $2, $3)
RETURNING id, "isActive", activity, "createdAt", "updatedAt"
`

type CreateBotStatusParams struct {
	ID       string  `json:"id"`
	IsActive bool    `json:"isActive"`
	Activity *string `json:"activity"`
}

func (q *Queries) CreateBotStatus(ctx context.Context, arg *CreateBotStatusParams) (*BotStatus, error) {
	row := q.db.QueryRow(ctx, CreateBotStatus, arg.ID, arg.IsActive, arg.Activity)
	var i BotStatus
	err := row.Scan(
		&i.ID,
		&i.IsActive,
		&i.Activity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const DeleteBotStatus = `-- name: DeleteBotStatus :exec
DELETE FROM "bot_status" WHERE "id" = $1
`

func (q *Queries) DeleteBotStatus(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, DeleteBotStatus, id)
	return err
}

const GetActiveBotStatus = `-- name: GetActiveBotStatus :one
SELECT id, "isActive", activity, "createdAt", "updatedAt" FROM "bot_status" WHERE "isActive" = true LIMIT 1
`

func (q *Queries) GetActiveBotStatus(ctx context.Context) (*BotStatus, error) {
	row := q.db.QueryRow(ctx, GetActiveBotStatus)
	var i BotStatus
	err := row.Scan(
		&i.ID,
		&i.IsActive,
		&i.Activity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const GetBotStatus = `-- name: GetBotStatus :one

SELECT id, "isActive", activity, "createdAt", "updatedAt" FROM "bot_status" WHERE "id" = $1
`

// Bot status queries
func (q *Queries) GetBotStatus(ctx context.Context, id string) (*BotStatus, error) {
	row := q.db.QueryRow(ctx, GetBotStatus, id)
	var i BotStatus
	err := row.Scan(
		&i.ID,
		&i.IsActive,
		&i.Activity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const ListAllBotStatuses = `-- name: ListAllBotStatuses :many
SELECT id, "isActive", activity, "createdAt", "updatedAt" FROM "bot_status" ORDER BY "createdAt" DESC
`

func (q *Queries) ListAllBotStatuses(ctx context.Context) ([]*BotStatus, error) {
	rows, err := q.db.Query(ctx, ListAllBotStatuses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*BotStatus{}
	for rows.Next() {
		var i BotStatus
		if err := rows.Scan(
			&i.ID,
			&i.IsActive,
			&i.Activity,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateBotActiveStatus = `-- name: UpdateBotActiveStatus :one
UPDATE "bot_status" 
SET "isActive" = $2, "updatedAt" = CURRENT_TIMESTAMP
WHERE "id" = $1
RETURNING id, "isActive", activity, "createdAt", "updatedAt"
`

type UpdateBotActiveStatusParams struct {
	ID       string `json:"id"`
	IsActive bool   `json:"isActive"`
}

func (q *Queries) UpdateBotActiveStatus(ctx context.Context, arg *UpdateBotActiveStatusParams) (*BotStatus, error) {
	row := q.db.QueryRow(ctx, UpdateBotActiveStatus, arg.ID, arg.IsActive)
	var i BotStatus
	err := row.Scan(
		&i.ID,
		&i.IsActive,
		&i.Activity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const UpdateBotActivity = `-- name: UpdateBotActivity :one
UPDATE "bot_status" 
SET "activity" = $2, "updatedAt" = CURRENT_TIMESTAMP
WHERE "id" = $1
RETURNING id, "isActive", activity, "createdAt", "updatedAt"
`

type UpdateBotActivityParams struct {
	ID       string  `json:"id"`
	Activity *string `json:"activity"`
}

func (q *Queries) UpdateBotActivity(ctx context.Context, arg *UpdateBotActivityParams) (*BotStatus, error) {
	row := q.db.QueryRow(ctx, UpdateBotActivity, arg.ID, arg.Activity)
	var i BotStatus
	err := row.Scan(
		&i.ID,
		&i.IsActive,
		&i.Activity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const UpdateBotStatus = `-- name: UpdateBotStatus :one
UPDATE "bot_status" 
SET "isActive" = $2, "activity" = $3, "updatedAt" = CURRENT_TIMESTAMP
WHERE "id" = $1
RETURNING id, "isActive", activity, "createdAt", "updatedAt"
`

type UpdateBotStatusParams struct {
	ID       string  `json:"id"`
	IsActive bool    `json:"isActive"`
	Activity *string `json:"activity"`
}

func (q *Queries) UpdateBotStatus(ctx context.Context, arg *UpdateBotStatusParams) (*BotStatus, error) {
	row := q.db.QueryRow(ctx, UpdateBotStatus, arg.ID, arg.IsActive, arg.Activity)
	var i BotStatus
	err := row.Scan(
		&i.ID,
		&i.IsActive,
		&i.Activity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
