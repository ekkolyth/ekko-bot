// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: user_discord_account.sql

package db

import (
	"context"
	"time"
)

const GetDiscordIdentityByAppUserId = `-- name: GetDiscordIdentityByAppUserId :one
SELECT discord_user_id, display_tag, avatar_hash, last_seen_at
FROM user_discord_account
WHERE app_user_id = $1
`

type GetDiscordIdentityByAppUserIdRow struct {
	DiscordUserID string    `json:"discord_user_id"`
	DisplayTag    string    `json:"display_tag"`
	AvatarHash    *string   `json:"avatar_hash"`
	LastSeenAt    time.Time `json:"last_seen_at"`
}

func (q *Queries) GetDiscordIdentityByAppUserId(ctx context.Context, appUserID string) (*GetDiscordIdentityByAppUserIdRow, error) {
	row := q.db.QueryRow(ctx, GetDiscordIdentityByAppUserId, appUserID)
	var i GetDiscordIdentityByAppUserIdRow
	err := row.Scan(
		&i.DiscordUserID,
		&i.DisplayTag,
		&i.AvatarHash,
		&i.LastSeenAt,
	)
	return &i, err
}

const GetDiscordIdentityByDiscordUserId = `-- name: GetDiscordIdentityByDiscordUserId :one
SELECT app_user_id, display_tag, avatar_hash, last_seen_at
FROM user_discord_account
WHERE discord_user_id = $1
`

type GetDiscordIdentityByDiscordUserIdRow struct {
	AppUserID  string    `json:"app_user_id"`
	DisplayTag string    `json:"display_tag"`
	AvatarHash *string   `json:"avatar_hash"`
	LastSeenAt time.Time `json:"last_seen_at"`
}

func (q *Queries) GetDiscordIdentityByDiscordUserId(ctx context.Context, discordUserID string) (*GetDiscordIdentityByDiscordUserIdRow, error) {
	row := q.db.QueryRow(ctx, GetDiscordIdentityByDiscordUserId, discordUserID)
	var i GetDiscordIdentityByDiscordUserIdRow
	err := row.Scan(
		&i.AppUserID,
		&i.DisplayTag,
		&i.AvatarHash,
		&i.LastSeenAt,
	)
	return &i, err
}

const UpsertUserDiscordAccount = `-- name: UpsertUserDiscordAccount :exec
INSERT INTO user_discord_account (app_user_id, discord_user_id, display_tag, avatar_hash, last_seen_at)
VALUES ($1, $2, $3, $4, NOW())
ON CONFLICT (app_user_id) 
DO UPDATE SET 
    discord_user_id = EXCLUDED.discord_user_id,
    display_tag = EXCLUDED.display_tag,
    avatar_hash = EXCLUDED.avatar_hash,
    last_seen_at = NOW()
`

type UpsertUserDiscordAccountParams struct {
	AppUserID     string  `json:"app_user_id"`
	DiscordUserID string  `json:"discord_user_id"`
	DisplayTag    string  `json:"display_tag"`
	AvatarHash    *string `json:"avatar_hash"`
}

func (q *Queries) UpsertUserDiscordAccount(ctx context.Context, arg *UpsertUserDiscordAccountParams) error {
	_, err := q.db.Exec(ctx, UpsertUserDiscordAccount,
		arg.AppUserID,
		arg.DiscordUserID,
		arg.DisplayTag,
		arg.AvatarHash,
	)
	return err
}
